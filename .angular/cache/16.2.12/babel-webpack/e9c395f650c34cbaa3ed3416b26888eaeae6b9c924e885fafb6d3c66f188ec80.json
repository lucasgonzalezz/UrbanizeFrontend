{"ast":null,"code":"import { API_URL } from \"src/environment/environment\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.ajax.service\";\nexport class SessionAjaxService {\n  constructor(http, userAjaxService) {\n    this.http = http;\n    this.userAjaxService = userAjaxService;\n    this.url = API_URL + '/session';\n    this.subjectSession = new Subject();\n  }\n  parseJwt(token) {\n    var base64url = token.split('.')[1];\n    var base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    return JSON.parse(jsonPayload);\n  }\n  prelogin() {\n    return this.http.get(this.url + '/prelogin');\n  }\n  loginCaptcha(username, password, token, answer) {\n    return this.http.post(this.url + '/loginCaptcha', {\n      username: username,\n      contrasenya: password,\n      token: token,\n      answer: answer\n    }, {\n      responseType: 'text'\n    });\n  }\n  login(username, password) {\n    return this.http.post(this.url + '/login', {\n      username: username,\n      contrasenya: password\n    }, {\n      responseType: 'text'\n    });\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  isSessionActive() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      let decodedToken = this.parseJwt(token);\n      if (Date.now() >= decodedToken.exp * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n  getUsername() {\n    if (this.isSessionActive()) {\n      let token = localStorage.getItem('token');\n      if (!token) {\n        return '';\n      } else {\n        return this.parseJwt(token).name;\n      }\n    } else {\n      return '';\n    }\n  }\n  on() {\n    return this.subjectSession.asObservable();\n  }\n  emit(event) {\n    this.subjectSession.next(event);\n  }\n  getSessionUser() {\n    if (this.isSessionActive()) {\n      return this.userAjaxService.getUserByUsername(this.getUsername());\n    } else {\n      return null;\n    }\n  }\n  static #_ = this.ɵfac = function SessionAjaxService_Factory(t) {\n    return new (t || SessionAjaxService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAjaxService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SessionAjaxService,\n    factory: SessionAjaxService.ɵfac\n  });\n}","map":{"version":3,"names":["API_URL","Subject","SessionAjaxService","constructor","http","userAjaxService","url","subjectSession","parseJwt","token","base64url","split","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","prelogin","get","loginCaptcha","username","password","answer","post","contrasenya","responseType","login","setToken","localStorage","setItem","getToken","getItem","logout","removeItem","isSessionActive","decodedToken","Date","now","exp","getUsername","name","on","asObservable","emit","event","next","getSessionUser","getUserByUsername","_","i0","ɵɵinject","i1","HttpClient","i2","UserAjaxService","_2","factory","ɵfac"],"sources":["C:\\Users\\Lucas\\Desktop\\urbanize-frontend\\src\\app\\service\\session.ajax.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { API_URL } from \"src/environment/environment\";\nimport { UserAjaxService } from \"./user.ajax.service\";\nimport { IPrelogin, IToken, IUser, SessionEvent } from \"../model/model.interfaces\";\nimport { Observable, Subject } from \"rxjs\";\n\n@Injectable()\n\nexport class SessionAjaxService {\n\n  private url = API_URL + '/session';\n\n  subjectSession = new Subject<SessionEvent>();\n\n  constructor(private http: HttpClient, private userAjaxService: UserAjaxService) {\n\n  }\n\n  private parseJwt(token: string): IToken {\n    var base64url = token.split('.')[1];\n    var base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n  }\n\n  prelogin(): Observable<IPrelogin> {\n    return this.http.get<IPrelogin>(this.url + '/prelogin');\n  }\n\n  loginCaptcha(username: string, password: string, token: string, answer: string): Observable<any> {\n    return this.http.post(this.url + '/loginCaptcha', { username: username, contrasenya: password, token: token, answer: answer }, { responseType: 'text' });\n  }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post(this.url + '/login', { username: username, contrasenya: password }, { responseType: 'text' });\n  }\n\n  setToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n  }\n\n  isSessionActive(): boolean {\n    let token: string | null = localStorage.getItem('token');\n    if (token) {\n      let decodedToken: IToken = this.parseJwt(token);\n      if (Date.now() >= decodedToken.exp * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  getUsername(): string {\n    if (this.isSessionActive()) {\n      let token: string | null = localStorage.getItem('token');\n      if (!token) {\n        return '';\n      } else {\n        return this.parseJwt(token).name;\n      }\n    } else {\n      return '';\n    }\n  }\n\n  on(): Observable<SessionEvent> {\n    return this.subjectSession.asObservable();\n  }\n\n  emit(event: SessionEvent): void {\n    this.subjectSession.next(event);\n  }\n\n  getSessionUser(): Observable<IUser> | null {\n    if (this.isSessionActive()) {\n      return this.userAjaxService.getUserByUsername(this.getUsername());\n    } else {\n      return null;\n    }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}