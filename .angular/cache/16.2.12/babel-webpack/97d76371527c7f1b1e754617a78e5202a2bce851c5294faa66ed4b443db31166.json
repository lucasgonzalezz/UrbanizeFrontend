{"ast":null,"code":"import { API_URL } from \"src/environment/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CategoryAjaxService {\n  constructor(http) {\n    this.http = http;\n    this.url = API_URL + '/category';\n  }\n  getCategorydById(id) {\n    return this.http.get(this.url + '/' + id);\n  }\n  getCategorydPage(page, size, sort, direction) {\n    return this.http.get(this.url + '?page=' + page + '&size=' + size + '&sort=' + sort + ',' + direction);\n  }\n  getCategorydRandom() {\n    return this.http.get(this.url + '/random');\n  }\n  createCategory(category) {\n    return this.http.post(this.url, category);\n  }\n  updateCategory(category) {\n    return this.http.put(this.url, category);\n  }\n  deleteCategory(id) {\n    return this.http.delete(this.url + '/' + id);\n  }\n  generateCategories(amount) {\n    return this.http.post(this.url + '/populate/' + amount, {});\n  }\n  deleteAllCategoryes() {\n    return this.http.delete(this.url + '/empty');\n  }\n  // Get category ordered by the quantity of associated products in descending order\n  getCategorydByQuantity() {\n    return this.http.get(this.url + '/quantityProduct');\n  }\n  static #_ = this.ɵfac = function CategoryAjaxService_Factory(t) {\n    return new (t || CategoryAjaxService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryAjaxService,\n    factory: CategoryAjaxService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["API_URL","CategoryAjaxService","constructor","http","url","getCategorydById","id","get","getCategorydPage","page","size","sort","direction","getCategorydRandom","createCategory","category","post","updateCategory","put","deleteCategory","delete","generateCategories","amount","deleteAllCategoryes","getCategorydByQuantity","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lucas\\Desktop\\urbanize-frontend\\src\\app\\service\\category.ajax.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { API_URL } from \"src/environment/environment\";\nimport { ICategory, ICategoryPage } from \"../model/model.interfaces\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryAjaxService {\n\n  private url = API_URL + '/category';\n\n  constructor(private http: HttpClient) {\n  }\n\n  getCategorydById(id: number): Observable<ICategory> {\n    return this.http.get<ICategory>(this.url + '/' + id);\n  }\n\n  getCategorydPage(page: number, size: number, sort: string, direction: string): Observable<ICategoryPage> {\n    return this.http.get<ICategoryPage>(this.url + '?page=' + page + '&size=' + size + '&sort=' + sort + ',' + direction);\n  }\n\n  getCategorydRandom(): Observable<ICategory> {\n    return this.http.get<ICategory>(this.url + '/random');\n  }\n\n  createCategory(category: ICategory): Observable<ICategory> {\n    return this.http.post<ICategory>(this.url, category);\n  }\n\n  updateCategory(category: ICategory): Observable<ICategory> {\n    return this.http.put<ICategory>(this.url, category);\n  }\n\n  deleteCategory(id: number | undefined): Observable<number> {\n    return this.http.delete<number>(this.url + '/' + id);\n  }\n\n  generateCategories(amount: number): Observable<number> {\n    return this.http.post<number>(this.url + '/populate/' + amount, {});\n  }\n\n  deleteAllCategoryes(): Observable<number> {\n    return this.http.delete<number>(this.url + '/empty');\n  }\n\n  // Get category ordered by the quantity of associated products in descending order\n  getCategorydByQuantity(): Observable<ICategory[]> {\n    return this.http.get<ICategory[]>(this.url + '/quantityProduct');\n  }\n\n}"],"mappings":"AAGA,SAASA,OAAO,QAAQ,6BAA6B;;;AAMrD,OAAM,MAAOC,mBAAmB;EAI9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAGJ,OAAO,GAAG,WAAW;EAGnC;EAEAK,gBAAgBA,CAACC,EAAU;IACzB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAY,IAAI,CAACH,GAAG,GAAG,GAAG,GAAGE,EAAE,CAAC;EACtD;EAEAE,gBAAgBA,CAACC,IAAY,EAAEC,IAAY,EAAEC,IAAY,EAAEC,SAAiB;IAC1E,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAAgB,IAAI,CAACH,GAAG,GAAG,QAAQ,GAAGK,IAAI,GAAG,QAAQ,GAAGC,IAAI,GAAG,QAAQ,GAAGC,IAAI,GAAG,GAAG,GAAGC,SAAS,CAAC;EACvH;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAY,IAAI,CAACH,GAAG,GAAG,SAAS,CAAC;EACvD;EAEAU,cAAcA,CAACC,QAAmB;IAChC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAY,IAAI,CAACZ,GAAG,EAAEW,QAAQ,CAAC;EACtD;EAEAE,cAAcA,CAACF,QAAmB;IAChC,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAY,IAAI,CAACd,GAAG,EAAEW,QAAQ,CAAC;EACrD;EAEAI,cAAcA,CAACb,EAAsB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACiB,MAAM,CAAS,IAAI,CAAChB,GAAG,GAAG,GAAG,GAAGE,EAAE,CAAC;EACtD;EAEAe,kBAAkBA,CAACC,MAAc;IAC/B,OAAO,IAAI,CAACnB,IAAI,CAACa,IAAI,CAAS,IAAI,CAACZ,GAAG,GAAG,YAAY,GAAGkB,MAAM,EAAE,EAAE,CAAC;EACrE;EAEAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACpB,IAAI,CAACiB,MAAM,CAAS,IAAI,CAAChB,GAAG,GAAG,QAAQ,CAAC;EACtD;EAEA;EACAoB,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACrB,IAAI,CAACI,GAAG,CAAc,IAAI,CAACH,GAAG,GAAG,kBAAkB,CAAC;EAClE;EAAC,QAAAqB,CAAA,G;qBA1CUxB,mBAAmB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB7B,mBAAmB;IAAA8B,OAAA,EAAnB9B,mBAAmB,CAAA+B,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}